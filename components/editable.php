<?php


abstract class Eddditor_Editable {

    protected
        $clean_values = array(),
        $formatted_values = array(),
        $form;


    final protected function apply_values($fields, $values) {
        // parse provided values for use in different contexts
        $this->clean_values = $this->clean_values($fields, $values);
        $this->formatted_values = $this->format_values($fields, $this->clean_values);

        // create edit form
        $this->form = new Eddditor_Form($fields, $this->clean_values);
    }


    /**
     * Clean user-provided values
     *
     * Depending on the context, field values are provided in different ways. This method normalizes an array
     * of user-provided field values. The return value is an array where the keys are human-readable field names
     * (as provided by the user in an ACF field group), and the values are unfiltered data of any type (as provided
     * by an element edit form or an existing post's JSON data).
     *
     * @param array $existing_fields Existing fields as provided by an ACF field group
     * @param array|bool $provided_values Array with user-provided values, or false if dealing with a new element
     * @return array Array with values ready for use in different contexts
     */
    final protected static function clean_values($existing_fields, $provided_values = array()) {
        $values = array();

        if (!is_array($provided_values)) {
            $provided_values = array();
        }

        // loop through existing fields and see if there's a user provided value for each one
        foreach ($existing_fields as $field_data) {
            $field_name = $field_data['name'];
            $field_key = $field_data['key'];

            // skip ACF 'tab' and 'message' fields to prevent pollution of $values with empty keys and values
            if (empty($field_name)) {
                continue;
            }

            // assign a value to this field
            if (isset($provided_values[$field_name])) {
                // either user provided value identified by name ...
                // (when $provided_values came from an existing post's JSON data)
                $values[$field_name] = $provided_values[$field_name];
            } else if (isset($provided_values[$field_key])) {
                // ... or user provided value identified by ACF key ...
                // (when $provided_values came from an edit form generated by ACF)
                $values[$field_name] = $provided_values[$field_key];
            } else if (isset($field_data['default_value'])) {
                // ... or set to default value ...
                $values[$field_name] = $field_data['default_value'];
            } else {
                // ... or fallback to null, to make sure all fields are present in the array
                $values[$field_name] = null;
            }

            // note:
            // in default ACF, field values are run through the acf/validate_value and acf/update_value filters
            // before saving them to the database
            // these filters can break fields in Eddditor's context and are therefore not applied
        }

        return $values;
    }


    /**
     * Format user-provided values for output
     *
     * @param array $existing_fields Existing fields as provided by an ACF field group
     * @param array $clean_values Array with clean values (that were run through Eddditor::clean_values() first)
     * @return array Array with values ready for use in different contexts
     */
    final protected static function format_values($existing_fields, $clean_values) {
        $values = array();

        // run all provided values through formatting filters
        foreach ($existing_fields as $field_data) {
            $field_name = $field_data['name'];

            // skip ACF 'tab' and 'message' fields to prevent pollution of $values with empty keys and values
            if (empty($field_name)) {
                continue;
            }

            // note:
            // in default ACF, field values are run through the acf/load_value filter before formatting
            // this filter can break fields in Eddditor's context and is therefore not applied

            // format values using ACF's formatting filters
            $values[$field_name] = acf_format_value($clean_values[$field_name], 0, $field_data); // 0 = post_id
        }

        return $values;
    }


    final public function get_clean_values() {
        return $this->clean_values;
    }


    final public function get_formatted_values() {
        return $this->formatted_values;
    }


    final public function get_form() {
        return $this->form;
    }
    
}
