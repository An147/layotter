<?php

namespace Layotter;

use WP_Post;

class Editor {

    /**
     * @param bool $enabled
     * @param WP_Post $post
     * @return bool
     */
    public static function should_use_gutenberg_for_post($enabled, $post) {
        if (Editor::is_enabled_for_post($post->ID)) {
            return false;
        }

        return $enabled;
    }

    /**
     * Sets up custom field tracking in post revisions for the WP Post Meta Revisions plugin.
     *
     * @param $keys array
     * @return array
     */
    public static function track_custom_field($keys) {
        $keys[] = Initializer::META_FIELD_JSON;
        return $keys;
    }

    /**
     * @return bool
     */
    public static function is_enabled_for_screen() {
        if (!is_admin()) {
            return false;
        }

        global $pagenow;
        if ($pagenow != 'post.php' && $pagenow != 'post-new.php') {
            return false;
        }

        if (!self::is_enabled_for_post(get_the_ID())) {
            return false;
        }

        return true;
    }

    /**
     * @param int $post_id
     * @return bool
     */
    public static function is_enabled_for_post($post_id) {
        if (!is_int($post_id)) {
            return false;
        }

        $override_enabled = apply_filters('layotter/enable_for_posts', []);
        $override_disabled = apply_filters('layotter/disable_for_posts', []);

        if (in_array($post_id, $override_enabled)) {
            return true;
        }

        if (in_array($post_id, $override_disabled)) {
            return false;
        }

        $post_type = get_post_type($post_id);
        $enabled_post_types = Settings::get_enabled_post_types();
        return in_array($post_type, $enabled_post_types);
    }

    /**
     * Replace TinyMCE with Layotter
     */
    public static function register_editor() {
        if (!self::is_enabled_for_screen()) {
            return;
        }

        $post_type = get_post_type();

        // remove TinyMCE
        remove_post_type_support($post_type, 'editor');

        // insert Layotter
        add_meta_box('layotter_wrapper', // ID
            'Layotter', // title
            [__CLASS__, 'print_editor'], // callback
            $post_type, // post type for which to enable
            'normal', // position
            'high' // priority
        );
    }

    /**
     * Output backend HTML for Layotter
     *
     * @param $post object Post object as provided by Wordpress
     */
    public static function print_editor($post) {
        $hidden_style = 'width: 1px; height: 1px; position: fixed; top: -999px; left: -999px;';
        $visible_style = 'width: 100%; height: 200px;margin-bottom: 30px;';
        echo '<textarea id="content" name="content" style="' . $hidden_style . '"></textarea>';

        if (Settings::is_debug_mode_enabled()) {
            echo '<p>';
            printf(__('Debug mode enabled: Inspect and manually edit the JSON structure generated by Layotter. Use with caution. A faulty structure will break your page layout and content. Go to <a href="%s">Layotter\'s settings page</a> to disable debug mode.', 'layotter'), admin_url('admin.php?page=layotter-settings'));
            echo '</p>';
            echo '<textarea id="layotter-json" name="' . Initializer::TEXTAREA_NAME . '" style="' . $visible_style . '"></textarea>';
        } else {
            echo '<textarea id="layotter-json" name="' . Initializer::TEXTAREA_NAME . '" style="' . $hidden_style . '"></textarea>';
        }

        Views\Editor::view();
    }

}
